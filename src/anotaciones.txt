
//Use el puerto 8083 porque están más enfocados al entorno web

//Despues de cada cambio hay que tumbar el servidor y despues iniciarlo

//Para utilizar un query se coloca en el navegador este simbolo &

//Para probar la funcionalidad del codigo en thunderclient o en postman codear lo siguiente:
    GET: http://localhost:8080/api/products/ (la id que queres traer)

Colores para el e-commerce = [
    fondo: #EEEEEE o #F6F6F6 o #F4EEEE
    color del cuerpo del titulo: #27323A o #373640 o 
    decoracion del cuerpo del titulo: #B6F7C1 o #A3F7BF 
    letras color principal: #6DECB9 o #29A19C
    tarjetas: #DADADA o #7E97A6 o 
    botones: #8FECC8 o #08FFC8 o #6DECB9
    letras del boton: #6F6F6F o #3C3C3C
    letras del e-commerce: #00918E o #29CDB5 o 4AE3B5#
];

//Codigo prueba = {
   
    let directorDeProductos = new ProductManager("./productosVapeo.json");
    console.log(directorDeProductos.getProducts());
    console.log(
        await directorDeProductos.addProduct(
        )
    );
    console.log(await directorDeProductos.getProducts());
    console.log(await directorDeProductos.getProductsById(0));
    console.log(
        await directorDeProductos.updateProductById({
            title,
            description,
            price,
            thumbnail,
            code,
            stock,
            id,
        })
    );
    console.log(await directorDeProductos.getProducts());
    console.log(await directorDeProductos.deleteProductById(0));
}

//Codigo de prueba para agregar items 
    <input
        type="text"
        id="productName"
        name="name"
        placeholder="Nombre del producto"
    />

    <label class="tituloFormulario" for="productTitle">Título:</label>
    <input
        type="text"
        id="productTitle"
        name="title"
        placeholder="Título del producto"
    />

    <label class="descripcionFormulario" for="productDescription">Descripción:</label>
    <textarea
        id="productDescription"
        name="description"
        placeholder="Descripción del producto"
    ></textarea>

    <label class="precioFormulario" for="productPrice">Precio:</label>
    <input
        type="number"
        id="productPrice"
        name="price"
        step="0.01"
        placeholder="Precio del producto"
    />

    <label class="imagenFormulario" for="productThumbnail">Thumbnail:</label>
    <input
        type="text"
        id="productThumbnail"
        name="thumbnail"
        placeholder="URL del thumbnail"
    />

    <label class="codigoFormulario" for="productCode">Código:</label>
    <input
        type="text"
        id="productCode"
        name="code"
        placeholder="Código del producto"
    />

    <label class="stockFormulario" for="productStock">Stock:</label>
    <input
        type="number"
        id="productStock"
        name="stock"
        placeholder="Stock del producto"
    />

    <button class="botonFormulario" type="submit">Agregar</button>
    </form>
//Fin del codigo prueba

//Codigo anterior de products.js. Lo meto acá simplemente por pruebas del backend

function addToCart(id, product) {
    let carrito = "64d6c953ddbeb56bf9552e7e";
    postCart(id, carrito)
      .then((dato) => {
        alert("producto agregado al carrito", dato);
      })
      .catch((err) => console.log(err, "no se agrego el producto "));
  }
  
  async function postCart(id, carrito) {
    try {
      const response = await fetch(`/api/carts/${carrito}/product/${id}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });
      return response;
    } catch (err) {
      console.log(err);
    }
  }
  
  async function increase(idCart, idProduct) {
    console.log(idCart, idProduct);
    let carrito = "64d6c953ddbeb56bf9552e7e";
    postCart(idProduct, carrito)
      .then((dato) => {
        alert("producto agregado al carrito", dato);
      })
      .catch((err) => console.log(err, "no se agrego el producto "));
  }
 